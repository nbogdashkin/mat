import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import re
import datetime

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–û–¢_–ë–û–¢–ê"

# –ü—Ä–∏–º–µ—Ä –º–∞—Ç–∞
blacklist = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "—Å—É–∫–∞", "–µ–±–∞–Ω", "–≥–∞–Ω–¥–æ–Ω", "–º—Ä–∞–∑—å", "—É–µ–±–æ–∫", "–ø–∏–¥–æ—Ä", "–¥–æ–ª–±–æ–µ–±"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöì –ú–µ–Ω—Ç –Ω–∞ –º–µ—Å—Ç–µ. –ú–∞—Ç –Ω–µ –ø—Ä–æ–π–¥–µ—Ç!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.lower()
    user = update.effective_user

    if any(re.search(rf"\b{word}\b", message_text) for word in blacklist):
        until = datetime.datetime.now() + datetime.timedelta(hours=24)
        try:
            await context.bot.restrict_chat_member(
                chat_id=update.effective_chat.id,
                user_id=user.id,
                permissions={"can_send_messages": False},
                until_date=until
            )
            await update.message.reply_text(f"üß® {user.first_name}, —Ç—ã –≤ –º—É—Ç–µ –Ω–∞ 24 —á–∞—Å–∞ –∑–∞ –º–∞—Ç.")
        except Exception as e:
            await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—å—é—Ç–∏—Ç—å. –ú–æ–∂–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    else:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–∞—Ç–∞")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
